package Team_Final_EEEEE;


import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import com.qualcomm.robotcore.hardware.Servo;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@TeleOp(name="FinalMecLinClaw_v10", group="Linear Opmode")

public class FinalMecLinClaw_v10 extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor frontleftd = null;
    private DcMotor frontrightd = null;
    private DcMotor rearleftd = null;
    private DcMotor rearrightd = null;
    private DcMotor linearslide = null;

    // setup left and right intakes
    private DcMotor intakeright = null;
    private DcMotor intakeleft = null;

    private Servo grip = null;
    private Servo rotate = null;
    private Servo bsecure = null;
    private Servo pullright = null;
    private Servo pullleft = null;


//  private DcMotor linearslide = null;
    
    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        frontleftd  = hardwareMap.get(DcMotor.class, "frontleftd");
        frontrightd = hardwareMap.get(DcMotor.class, "frontrightd");
        rearleftd = hardwareMap.get(DcMotor.class, "rearleftd");
        rearrightd = hardwareMap.get(DcMotor.class, "rearrightd");
        linearslide = hardwareMap.get(DcMotor.class,"linearslide");
        // intialization of intake motors
        intakeleft  = hardwareMap.get(DcMotor.class, "intakeleft");
        intakeright = hardwareMap.get(DcMotor.class, "intakeright");

        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        //frontleftd.setDirection(DcMotor.Direction.FORWARD);
        //frontrightd.setDirection(DcMotor.Direction.REVERSE);

        intakeleft.setDirection(DcMotor.Direction.REVERSE);
        intakeright.setDirection(DcMotor.Direction.FORWARD);

        grip = hardwareMap.get(Servo.class,"grip");
        rotate = hardwareMap.get(Servo.class,"rotate");
        bsecure = hardwareMap.get(Servo.class,"bsecure");
        pullright = hardwareMap.get(Servo.class,"pullright");
        pullleft = hardwareMap.get(Servo.class,"pullleft");


        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            double linear = gamepad2.left_stick_y;
            linearslide.setPower(linear);
            
            // Setup a variable for each drive wheel to save power level for telemetry
            double leftPower;
            double rightPower;

            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.
            double x = gamepad1.left_stick_x;
            double y = -gamepad1.left_stick_y;
            double turn = gamepad1.right_stick_x;
            double theta = 0.0;
            double ts = turn;
            double inon = gamepad1.right_trigger;
            double inok = gamepad1.left_trigger;
            boolean inoff = gamepad1.y;
                   
            double t[] = {  0, 0.25*Math.PI, 0.5*Math.PI, 0.75*Math.PI, Math.PI, 
                            1.25*Math.PI, 1.5*Math.PI, 1.75*Math.PI, 2.0*Math.PI};
            
            // d = direction, in this order = fl -> fr -> rl -> rr
            double d[][] = {    {-1, -1, 1, 1}, // E
                                {-1, 0, 0, 1}, // NE
                                {-1, 1, -1, 1}, // N
                                {0, 1, -1, 0}, // NW
                                {1, 1, -1, -1}, // W
                                {1, 0, 0, -1}, // SW
                                {1, -1, 1, -1}, // S
                                {0, -1, 1, 0}, // SE
                                {-1, -1, 1, 1}}; // E

            
            int fl = 0, fr = 1, rl = 2, rr = 3;
            double mag = Math.sqrt(x*x + y*y);
            int direction = 0;

            theta = Math.atan2(y, x);

            if (theta < 0.0)
            {
                theta = theta + 2*Math.PI;
            }

            double magnitude[] = {0, 0, 0, 0}; // {fl, fr, rl, rr}
            int start = ((int) (theta/(0.25*Math.PI))) % 8;
            int end = start + 1;
            for (int i = 0; i < 4; i++)
            {
                magnitude[i] = mag*(d[start][i] + ((theta - t[start])/(t[end] - t[start]))*(d[end][i] - d[start][i]));
            }
            
            if (turn < 0)
            {
    //            magnitude[fl] = 0;
    //            magnitude[fr] = 0;
                magnitude[fl] = ts;
                magnitude[fr] = ts;
                magnitude[rl] = ts;
                magnitude[rr] = ts;
            }
            else if (turn > 0)
            {
    //            magnitude[fl] = 0;
    //            magnitude[fr] = 0;
                magnitude[fl] = ts;
                magnitude[fr] = ts;
                magnitude[rl] = ts;
                magnitude[rr] = ts;
            }
            
            if ( inon > 0)
            {
                intakeleft.setPower(1);
                intakeright.setPower(1);
            }
            else if (inok > 0)
            {
                intakeleft.setPower(-1);
                intakeright.setPower(-1);
            }
             else if (inoff)
            {
                intakeleft.setPower(0.0);
                intakeright.setPower(0.0);
            }
            telemetry.addData("X-Y-Theta", "x (%.2f), y (%.2f), theta (%.2f)", x, y, Math.toDegrees(theta));
            telemetry.update();
            
        
           // double turn  = -gamepad1.right_stick_x;
           // leftPower    = Range.clip(drive + turn, -1.0, 1.0) ;
           // rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;

            // Tank Mode uses one stick to control each wheel.
            // - This requires no math, but it is hard to drive forward slowly and keep straight.
            // leftPower  = -gamepad1.left_stick_y ;
            // rightPower = -gamepad1.right_stick_y ;


            // Send calculated power to wheels

            // Move forward settings
            // {fl, fr, rl, rr}
            frontleftd.setPower(magnitude[fl]);
            frontrightd.setPower(magnitude[fr]);
            rearleftd.setPower(magnitude[rl]);
            rearrightd.setPower(magnitude[rr]);
            
            // linearslide.setPower(1);

            //intakeleft.setPower(1);
            //intakeright.setPower(1);
            boolean changed = false; //Outside of loop() 
            //telemetry.addData("Servo Grip Postion", grip.getPosition());
            //telemetry.update();
            if(gamepad2.a && !changed) {
                if(grip.getPosition() == 1) grip.setPosition(0.6);
                else 
                    grip.setPosition(1); changed = true; 
                    } 
                else if(!gamepad2.a) changed = false;
                
            
            boolean changed2 = false; //Outside of loop() 
   //         telemetry.addData("Servo Rotate Postion", rotate.getPosition());
//            telemetry.update();
            if(gamepad2.y && !changed2) {
                if(rotate.getPosition() == 0.1) rotate.setPosition(0.55);
                else 
                    rotate.setPosition(0.1); changed2 = true; 
                    } 
                else if(!gamepad2.y) changed2 = false;

            boolean changed3 = false; //Outside of loop() 
   //         telemetry.addData("Servo bsecure Postion", bsecure.getPosition());
    //        telemetry.update();
            if(gamepad1.a && !changed3) {
                if(bsecure.getPosition() == 0.1) bsecure.setPosition(0.7);
                else 
                    bsecure.setPosition(0.1); changed3 = true; 
                    } 
                else if(!gamepad1.a) changed3 = false;
                
            boolean changed4 = false; //Outside of loop() 
            boolean changed5 = false; //Outside of loop() 

 //           telemetry.addData("Servo pullright Postion", pullright.getPosition());
            telemetry.addData("Servo pullleft Postion", pullleft.getPosition());
            telemetry.update();
            if(gamepad1.x && !changed4) {
                
               if(pullright.getPosition() == 0.0) pullright.setPosition(0.8);
                else 
                    pullright.setPosition(0.0); 
                changed4 = true; 
                }
                else if(!gamepad1.x) changed4 = false;

            
            if(gamepad1.x && !changed5) {
                
               if(pullleft.getPosition() == 0.0) pullleft.setPosition(0.8);
                else 
                    pullleft.setPosition(0.0); 
                changed5 = true; }
                else if(!gamepad1.x) changed5 = false;
            
            // if(pullleft.getPosition() == 0.1) {
            //         pullleft.setDirection(Servo.Direction.FORWARD);
            //         pullleft.setPosition(0.8);
            //         pullright.setPosition(0.8);}
            //     else 
            //         {pullleft.setPosition(0.1); 
            //         pullright.setPosition(0.1);
            //         changed5 = true;   } 
                
      //      } 
        //        else if(!gamepad1.x) 
   //                 changed4 = false;
          //          changed5 = false;
        }
    }
}
          // Show the elapsed game time and wheel power.
          //telemetry.addData("Status", "Run Time: " + runtime.toString());
          //  telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
          //  telemetry.update();
